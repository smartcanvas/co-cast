buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "se.transmode.gradle:gradle-docker:$gradleDockerVersion"
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'docker'

// Group ID
group "$groupId"
// Version
version "$versionNumber"
//WAR base name
war.baseName = "$backendApp"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    //Testing libraries
    testCompile "junit:junit:$junitVersion"

    //Glassfish libraries
    compile "org.glassfish.jersey.containers:jersey-container-jetty-servlet:$jerseyVersion"
    compile "org.glassfish.jersey.core:jersey-client:$jerseyVersion"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
    compile "org.glassfish.hk2:guice-bridge:$guiceBridge"

    //Logs
    compile "log4j:log4j:$log4jVersion"
    compile "com.logentries:logentries-appender:$logEntriesVersion"

    //Java Libraries
    providedCompile "javax.servlet:servlet-api:$servletVersion"
    compile "javax.mail:mail:1.4.7"

    //Apache Commons
    compile "org.apache.commons:commons-lang3:$commonsLang3"

    //Hibernate Validator
    compile "org.hibernate:hibernate-validator:$hibernateValidator"

    //Google Libraries
    compile "com.google.guava:guava:$guavaVersion"
    compile "com.google.inject.extensions:guice-servlet:$guiceVersion"
    compile "com.google.api-client:google-api-client:$googleApiClient"
    compile "com.google.apis:google-api-services-oauth2:$googleOAuthApiClient"
    compile "com.google.http-client:google-http-client-gson:$googleApiClient"

    //Security
    compile "org.bitbucket.b_c:jose4j:$jose4jVersion"
    compile "com.firebase:firebase-token-generator:$firebaseTokenGeneratorVersion"
    compile 'io.jsonwebtoken:jjwt:0.6.0'

    //CORS filter
    compile "com.thetransactioncompany:cors-filter:$corsFilterVersion"

    //Jackson
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:$jacksonVersion"

    //Memcached
    compile "net.spy:spymemcached:$spymemcachedVersion"

    //Sendgrid
    compile "com.sendgrid:sendgrid-java:$sendgridVersion"
}

jettyRun {
    httpPort = "$backendPort".toInteger()
    contextPath = '/'
}

docker {
    baseImage "jetty:9.3.6-jre8"
    maintainer 'Daniel Viveiros "viveiros@ciandt.com"'
}

/**
 * Updates the docker image
 */
task backendDocker(dependsOn: war, type: Docker) {
    applicationName = "$backendApp"
    tagVersion = "$versionNumber"
    addFile("build/libs/$backendApp-$versionNumber" + ".war", '/var/lib/jetty/webapps/ROOT.war')
    exposePort("$backendPort".toInteger())
}

/**
 * Tag the docker image to push to google registry
 */
task tagBackendDockerImage(dependsOn: backendDocker, type: Exec) {
    //command to be executed
    commandLine 'docker', 'tag', '-f', "$groupId/$backendApp:$versionNumber", "gcr.io/co-cast/$backendApp:latest"
}

/**
 * Push the docker image to Google Registry
 */
task pushBackendDockerImage(dependsOn: tagBackendDockerImage, type: Exec) {
    //command to be executed
    commandLine 'gcloud', 'docker', 'push', "gcr.io/co-cast/$backendApp"
}

/**
 * Redeploys the DEV environment
 */
task redeployDevBackend(dependsOn: pushBackendDockerImage, type: Exec) {
    //command to be executed
    workingDir "$projectDir/../scripts"
    commandLine "$projectDir/../scripts/redeploy-dev.sh"
}

/**
 * Redeploys the PRD environment
 */
task redeployPrdBackend(type: Exec) {
    //command to be executed
    workingDir "$projectDir/../scripts"
    commandLine "$projectDir/../scripts/redeploy-prd.sh"
}


